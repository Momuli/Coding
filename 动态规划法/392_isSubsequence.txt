isSubsequence1:
双指针法：
时间复杂度：O(m+n)
1.i指向s,t指向j
2.当s[i]与t[j]匹配时，双指针都后移一位
3.当s[i]与t[j]不匹配时，j后移

终止条件：
循换结束后：
如果i==len(s)：匹配成功
如果i<len(s)并且j==len(t):匹配失败



isSubsequence2:
动态规划法：
1.针对主串t构建dp表(倒叙遍历t)：
dp[i][j]:从t[i]位置开始第j个元素首次出现的索引
dp行：主串t的每个字符
dp列：26个英文字母(a-z)
状态转移方程：
dp[i][j] = dp[i+1][j]  if t[i] != j所表示的字母
         = i           if t[i] = j所表示的字母

2.跳跃匹配
遍历子串s:
如果s[j]对应的字符在dp表中的索引！= len(t):
dp[m][ord(s[j])-ord('a')] == len(t)
表示匹配成功，继续匹配下一个
如果s[j]对应的字符在dp表中的索引== len(t):
匹配失败


